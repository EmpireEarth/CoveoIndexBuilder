{
    "title" : "How to create three fields from one Date_Time type custom field",
    "uri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "printableUri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "clickUri" : "https://na61.salesforce.com/kA132000000L8aF",
    "uniqueId" : "42.13819$http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "excerpt" : "In this article, we're going to show you how to create three fields from one Date/Time type custom field using Coveo .NET. ... Following a backup process on the Lotus Notes server, last modified da...",
    "firstSentences" : null,
    "summary" : null,
    "flags" : "HasHtmlVersion",
    "hasHtmlVersion" : true,
    "hasMobileHtmlVersion" : false,
    "score" : 1236,
    "percentScore" : 79.10896,
    "rankingInfo" : null,
    "rating" : 3.0,
    "isTopResult" : false,
    "isRecommendation" : false,
    "titleHighlights" : [ ],
    "firstSentencesHighlights" : [ ],
    "excerptHighlights" : [ ],
    "printableUriHighlights" : [ ],
    "summaryHighlights" : [ ],
    "parentResult" : null,
    "childResults" : [ ],
    "totalNumberOfChildResults" : 0,
    "raw" : {
      "systitle" : "How to create three fields from one Date_Time type custom field",
      "sysurihash" : "scMaNðBbKakwsgf3",
      "urihash" : "scMaNðBbKakwsgf3",
      "parents" : "<?xml version=\"1.0\" encoding=\"utf-16\"?><parents><parent name=\"Organization\" uri=\"https://na61.salesforce.com/home/home.jsp\" /><parent name=\"KB_Article__ka\" uri=\"http://www.salesforce.com/org:organization/articletype:KB_Article\" /><parent name=\"How to create three fields from one Date_Time type custom field\" uri=\"https://na61.salesforce.com/kA132000000L8aF\" /></parents>",
      "sfdcarticletype" : "How To/Question",
      "sfresolutionc" : "The solution is to undo the backup process. In the meantime, here is a workaround:<br><br>From a Date/Time Type, we&#39;re going to create the following fields:<br><br>1) A year field<br>2) A month field <br>3) A month name field<br><br>You need to create 4 customs fields in CES:<br><br>1) Create a custom field based on the metadata returned by the  @allfieldvalues values<br><br><img alt=\"User-added image\" height=\"233\" src=\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5O\" width=\"500\"></img><br><br>In this example, the metadata was &quot;Created&quot;, so let&#39;s create a Date/Time Type custom field with that metadata.<br><br><span style=\"color: #FF0000;\">Note: For section # 2 to 4, you can change the field name but keep the metadata name as it is since they are used in the postconversion script.</span><br><br>2) Create a &quot;PostedDateYear&quot; string type custom field: <br><br>Metadata Name: yearonly <br><br>3) Create a &quot;PostedDateMonth&quot; string type custom field:<br><br>Metadata Name: monthonlynumber <br><br>4) Create a &quot;PostedDateMonthName&quot; string type custom field: <br><br>Metadata Name: monthonlyname <br><br>Now that the custom fields are all created, you need to use a postconversiont script.<br><br>During the indexing process the script will: <br><br>- take the Year value from the &quot;PostedDate&quot; metadata and send it to the PostedDateYear field <br>- take the Month number value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonth field <br>- take the Month name value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonthName field <br><br>Here is the script: <br> \n<pre class=\"ckeditor_codeblock\">\ntry { \n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\n    PostConversion.Trace(d, 1);\n\n    var y = d.getFullYear();\n    DocumentInfo.SetFieldValue(&quot;yearonly&quot;, y);\n\n    var m = d.getMonth() + 1;\n    PostConversion.Trace(&quot;year&quot; + y + &quot; - month&quot; + m, 1);\n    \n    var monthNumberString;\n    if (m.toString().length === 1)\n    {\n        monthNumberString = &quot;0&quot; + m.toString();\n    }\n    else\n    {\n        monthNumberString = m.toString();\n    }\n    PostConversion.Trace(&quot;monthNumberString: &quot; + monthNumberString, 1);\n    DocumentInfo.SetFieldValue(&quot;monthonlynumber&quot;, monthNumberString);\n\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\n    var month = new Array();\n    month[0] = &quot;January&quot;;\n    month[1] = &quot;February&quot;;\n    month[2] = &quot;March&quot;;\n    month[3] = &quot;April&quot;;\n    month[4] = &quot;May&quot;;\n    month[5] = &quot;June&quot;;\n    month[6] = &quot;July&quot;;\n    month[7] = &quot;August&quot;;\n    month[8] = &quot;September&quot;;\n    month[9] = &quot;October&quot;;\n    month[10] = &quot;November&quot;;\n    month[11] = &quot;December&quot;;\n    var n = month[d.getMonth()];\n    DocumentInfo.SetFieldValue(&quot;monthonlyname&quot;,n);\n}\ncatch(e)\n{\n}</pre>\n<br>Copy it into a .txt file and add it as .NET <a href=\"https://onlinehelp.coveo.com/en/ces/7.0/administrator/adding_a_postconversion_script.htm\" target=\"_blank\">postconversion script into the source</a>.<br><br>Note: At this stage, a rebuild of the source will be necessary. <br><br>Finally, you can create 2 facets:<br><br>- A facet with Field to Group On is PostedDateYear<br>- A facet with Field to Group On is PostedDateMonth and Field to Display is PostedDateMonthName<br><br><img alt=\"User-added image\" height=\"495\" src=\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5T\" width=\"500\"></img><br><br> ",
      "sysuri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
      "sysprintableuri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
      "sflastpublisheddate" : 1487019581000,
      "systransactionid" : 161138,
      "sfurlname" : "2051",
      "sfsystemmodstamp" : 1506940343000,
      "sfisvisibleinapp" : "true",
      "sfcoveoversionc" : "Coveo Enterprise Search 7.0",
      "sysconcepts" : "custom fields ; backup process ; Lotus Notes ; metadata ; PostedDateYear ; script ; using Coveo ; allfieldvalues ; monthonlyname",
      "sfkbversionnumber" : "1",
      "concepts" : "custom fields ; backup process ; Lotus Notes ; metadata ; PostedDateYear ; script ; using Coveo ; allfieldvalues ; monthonlyname",
      "printableuri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
      "documenttype" : "article",
      "sfkbarticlekavid" : "ka132000000LM2RAAW",
      "sysindexeddate" : 1518187549000,
      "sfknowledgearticleid" : "kA132000000L8aFCAS",
      "sfcreatedbyid" : "00560000002MKBSAA4",
      "sfconnectorc" : "N/A",
      "permanentid" : "c039cdc07ddde6923f45ea7adb06abdd108932df99f094aae416b0d6230f",
      "syslanguage" : [ "English" ],
      "transactionid" : 161138,
      "sfisvisibleinprm" : "true",
      "title" : "How to create three fields from one Date_Time type custom field",
      "sfversionnumber" : 1,
      "sfarticlenumber" : "000002051",
      "date" : 1506940343000,
      "objecttype" : "KB Article",
      "allmetadatavalues" : "{\"kav_lastmodifiedby.attribute.type\": [\"User\"], \"coveo_short_id\": [\"kA132000000L8aF\"], \"sflastmodifiedbyname\": [\"Karel Mpungi\"], \"kav_coveo_version__c__html_stripped\": [\"Coveo Enterprise Search 7.0\"], \"fileextension\": [\"\"], \"sfdcexpandedproduct\": [\"All;All|.NET Search Interface;All|Coveo Enterprise Search\"], \"kav_createdby.attribute.url\": [\"/services/data/v34.0/sobjects/User/00560000002MKBSAA4\"], \"sflanguage\": [\"en_US\"], \"kav_createdby.attribute.type\": [\"User\"], \"kav_createdby.id\": [\"00560000002MKBSAA4\"], \"kav_language\": [\"en_US\"], \"sfsitecoreversionc\": [\"N/A\"], \"sourcetype\": [\"Salesforce\"], \"title\": [\"How to create three fields from one Date_Time type custom field\"], \"source\": [\"Salesforce Public Items\"], \"kav_owner.attribute.url\": [\"/services/data/v34.0/sobjects/User/00560000002MKBSAA4\"], \"parents\": [\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?><parents><parent name=\\\"Organization\\\" uri=\\\"https://na61.salesforce.com/home/home.jsp\\\" /><parent name=\\\"KB_Article__ka\\\" uri=\\\"http://www.salesforce.com/org:organization/articletype:KB_Article\\\" /><parent name=\\\"How to create three fields from one Date_Time type custom field\\\" uri=\\\"https://na61.salesforce.com/kA132000000L8aF\\\" /></parents>\"], \"sfisvisibleinprm\": [true], \"kav_title\": [\"How to create three fields from one Date/Time type custom field\"], \"kav_isvisibleincsp\": [true], \"hashtmlversion\": [true], \"kav_versionnumber\": [1], \"sfcreatedbyname\": [\"Karel Mpungi\"], \"sflastpublisheddate\": [1487019581], \"objecttypelabel\": [\"KB Article\"], \"kav_cause__c__html_stripped\": [\"Following a backup process on the Lotus Notes server, last modified date sent by Lotus Notes to CES became the date of the backup, not the actual last modified date. \\n \\u00a0\"], \"originalhtmlcharset\": [1200], \"coveo_connector_hasbinarydata\": [false], \"kav_lastpublisheddate\": [1487019581], \"sfsystemmodstamp\": [1506940343], \"ka_attribute.type\": [\"KB_Article__ka\"], \"sfdcproduct\": [\".NET Search Interface;Coveo Enterprise Search\"], \"kav_resolution__c__html_stripped\": [\"The solution is to undo the backup process. In the meantime, here is a workaround: \\n \\n From a Date/Time Type, we're going to create the following fields: \\n \\n 1) A year field \\n 2) A month field\\u00a0 \\n 3) A month name field \\n \\n You need to create 4 customs fields in CES: \\n \\n 1) Create a custom field based on the metadata returned by the \\u00a0@allfieldvalues values \\n \\n  \\n \\n In this example, the metadata was \\\"Created\\\", so let's create a Date/Time Type custom field with that metadata. \\n \\n Note: For section # 2 to 4, you can change the field name but keep the metadata name as it is since they are used in the postconversion script. \\n \\n 2) Create a \\\"PostedDateYear\\\" string type custom field:\\u00a0 \\n \\n Metadata Name: yearonly\\u00a0 \\n \\n 3) Create a \\\"PostedDateMonth\\\" string type custom field: \\n \\n Metadata Name: monthonlynumber\\u00a0 \\n \\n 4) Create a \\\"PostedDateMonthName\\\" string type custom field:\\u00a0 \\n \\n Metadata Name: monthonlyname\\u00a0 \\n \\n Now that the custom fields are all created, you need to use a postconversiont script. \\n \\n During the indexing process the script will:\\u00a0 \\n \\n - take the Year value from the \\\"PostedDate\\\" metadata and send it to the PostedDateYear field\\u00a0 \\n - take the Month number value from the \\\"PostedDate\\\" metadata and send it to the PostedDateMonth field\\u00a0 \\n - take the Month name value from the \\\"PostedDate\\\" metadata and send it to the PostedDateMonthName field\\u00a0 \\n \\n Here is the script:\\u00a0 \\n \\u00a0\\n \\ntry { \\n    var d = new Date(DocumentInfo.GetFieldValue(\\\"Created\\\"));\\n    PostConversion.Trace(d, 1);\\n\\n    var y = d.getFullYear();\\n    DocumentInfo.SetFieldValue(\\\"yearonly\\\", y);\\n\\n    var m = d.getMonth() + 1;\\n    PostConversion.Trace(\\\"year\\\" + y + \\\" - month\\\" + m, 1);\\n    \\n    var monthNumberString;\\n    if (m.toString().length === 1)\\n    {\\n        monthNumberString = \\\"0\\\" + m.toString();\\n    }\\n    else\\n    {\\n        monthNumberString = m.toString();\\n    }\\n    PostConversion.Trace(\\\"monthNumberString: \\\" + monthNumberString, 1);\\n    DocumentInfo.SetFieldValue(\\\"monthonlynumber\\\", monthNumberString);\\n\\n    var d = new Date(DocumentInfo.GetFieldValue(\\\"Created\\\"));\\n    var month = new Array();\\n    month[0] = \\\"January\\\";\\n    month[1] = \\\"February\\\";\\n    month[2] = \\\"March\\\";\\n    month[3] = \\\"April\\\";\\n    month[4] = \\\"May\\\";\\n    month[5] = \\\"June\\\";\\n    month[6] = \\\"July\\\";\\n    month[7] = \\\"August\\\";\\n    month[8] = \\\"September\\\";\\n    month[9] = \\\"October\\\";\\n    month[10] = \\\"November\\\";\\n    month[11] = \\\"December\\\";\\n    var n = month[d.getMonth()];\\n    DocumentInfo.SetFieldValue(\\\"monthonlyname\\\",n);\\n}\\ncatch(e)\\n{\\n} \\n \\n Copy it into a .txt file and add it as .NET  postconversion script into the source . \\n \\n Note: At this stage, a rebuild of the source will be necessary.\\u00a0 \\n \\n Finally, you can create 2 facets: \\n \\n - A facet with Field to Group On is PostedDateYear \\n - A facet with Field to Group On is PostedDateMonth and Field to Display is PostedDateMonthName \\n \\n  \\n \\n \\u00a0\"], \"clickableuri\": [\"https://na61.salesforce.com/kA132000000L8aF\"], \"sftitle\": [\"How to create three fields from one Date/Time type custom field\"], \"kav_owner.id\": [\"00560000002MKBSAA4\"], \"sfbuildc\": [\"All\"], \"sfisvisibleinapp\": [true], \"ka_attribute.url\": [\"/services/data/v34.0/sobjects/KB_Article__ka/kA132000000L8aFCAS\"], \"sfdcarticletype\": [\"How To/Question\"], \"kav_cause__c\": [\"Following a backup process on the Lotus Notes server, last modified date sent by Lotus Notes to CES became the date of the backup, not the actual last modified date.<br>\\u00a0\"], \"sfislatestversion\": [true], \"sfcausec\": [\"Following a backup process on the Lotus Notes server, last modified date sent by Lotus Notes to CES became the date of the backup, not the actual last modified date.<br>\\u00a0\"], \"contenttype\": [\"binarydata\"], \"sfurlname\": [\"2051\"], \"ka_id\": [\"kA132000000L8aFCAS\"], \"kav_datacategoryselections.datacategoryname\": [\"NET_Search_Interface;How_To;Coveo_Enterprise_Search\"], \"coveo_url\": [\"https://na61.salesforce.com/kA132000000L8aF\"], \"kav_urlname\": [\"2051\"], \"kav_dc_expanded_product\": [\"All;All|.NET Search Interface;All|Coveo Enterprise Search\"], \"foldingcollection\": [\"94aa2e5b13f409e5a374dc5f5613366e0f5dd4ec5e2f6adfc2992d6f6e87\"], \"body\": [\"<html>   <body>     <div style=\\\"background-color: #fff;border: 2px solid #BBC5CC;border-radius: 4px;float: left;font-family: lato;margin-left: 15px;margin-right: 15px;margin-bottom: 4%;padding: 10px;width: 60%;\\\">       <div style=\\\"font-size: 1.5em;font-weight: 600;Padding-top: 30px;border-bottom: 1px solid #BBC5CC;\\\">         <div style=\\\"border-left: 1px solid #BBC5CC;border-top: 1px solid #BBC5CC;color: #296896;padding: 10px;width: 15%;\\\">           Description         </div>       </div>       <div style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;\\\"> In this article, we&#39;re going to show you how to create three fields from one Date/Time type custom field using Coveo .NET.</div>       <div style=\\\"font-size: 1.5em;font-weight: 600;Padding-top: 30px;border-bottom: 1px solid #BBC5CC;\\\">         <div style=\\\"border-left: 1px solid #BBC5CC;border-top: 1px solid #BBC5CC;color: #296896;padding: 10px;width: 15%;\\\">           Environment         </div>       </div>       <br/>       <table>         <tr>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Product</td>           <td></td>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Sitecore Version</td>           <td>N/A</td>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Connector</td>           <td>N/A</td>         </tr>         <tr>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Published</td>           <td>1487019581</td>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Version</td>           <td></td>           <td style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;font-weight: 600;\\\">Build</td>           <td>All</td>         </tr>       </table>       <br/>       <div style=\\\"font-size: 1.5em;font-weight: 600;Padding-top: 30px;border-bottom: 1px solid #BBC5CC;\\\">         <div style=\\\"border-left: 1px solid #BBC5CC;border-top: 1px solid #BBC5CC;color: #296896;padding: 10px;width: 15%;\\\">           Cause         </div>       </div>       <div style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;\\\"> Following a backup process on the Lotus Notes server, last modified date sent by Lotus Notes to CES became the date of the backup, not the actual last modified date.<br>\\u00a0</div>       <div style=\\\"font-size: 1.5em;font-weight: 600;Padding-top: 30px;border-bottom: 1px solid #BBC5CC;\\\">         <div style=\\\"border-left: 1px solid #BBC5CC;border-top: 1px solid #BBC5CC;color: #296896;padding: 10px;width: 15%;\\\">           Resolution         </div>       </div>       <div style=\\\"margin-left: 35px;margin-top: 10px;font-size: 1em;\\\"> The solution is to undo the backup process. In the meantime, here is a workaround:<br><br>From a Date/Time Type, we&#39;re going to create the following fields:<br><br>1) A year field<br>2) A month field\\u00a0<br>3) A month name field<br><br>You need to create 4 customs fields in CES:<br><br>1) Create a custom field based on the metadata returned by the \\u00a0@allfieldvalues values<br><br><img alt=\\\"User-added image\\\" height=\\\"233\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5O\\\" width=\\\"500\\\"></img><br><br>In this example, the metadata was &quot;Created&quot;, so let&#39;s create a Date/Time Type custom field with that metadata.<br><br><span style=\\\"color: #FF0000;\\\">Note: For section # 2 to 4, you can change the field name but keep the metadata name as it is since they are used in the postconversion script.</span><br><br>2) Create a &quot;PostedDateYear&quot; string type custom field:\\u00a0<br><br>Metadata Name: yearonly\\u00a0<br><br>3) Create a &quot;PostedDateMonth&quot; string type custom field:<br><br>Metadata Name: monthonlynumber\\u00a0<br><br>4) Create a &quot;PostedDateMonthName&quot; string type custom field:\\u00a0<br><br>Metadata Name: monthonlyname\\u00a0<br><br>Now that the custom fields are all created, you need to use a postconversiont script.<br><br>During the indexing process the script will:\\u00a0<br><br>- take the Year value from the &quot;PostedDate&quot; metadata and send it to the PostedDateYear field\\u00a0<br>- take the Month number value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonth field\\u00a0<br>- take the Month name value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonthName field\\u00a0<br><br>Here is the script:\\u00a0<br>\\u00a0\\n<pre class=\\\"ckeditor_codeblock\\\">\\ntry { \\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    PostConversion.Trace(d, 1);\\n\\n    var y = d.getFullYear();\\n    DocumentInfo.SetFieldValue(&quot;yearonly&quot;, y);\\n\\n    var m = d.getMonth() + 1;\\n    PostConversion.Trace(&quot;year&quot; + y + &quot; - month&quot; + m, 1);\\n    \\n    var monthNumberString;\\n    if (m.toString().length === 1)\\n    {\\n        monthNumberString = &quot;0&quot; + m.toString();\\n    }\\n    else\\n    {\\n        monthNumberString = m.toString();\\n    }\\n    PostConversion.Trace(&quot;monthNumberString: &quot; + monthNumberString, 1);\\n    DocumentInfo.SetFieldValue(&quot;monthonlynumber&quot;, monthNumberString);\\n\\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    var month = new Array();\\n    month[0] = &quot;January&quot;;\\n    month[1] = &quot;February&quot;;\\n    month[2] = &quot;March&quot;;\\n    month[3] = &quot;April&quot;;\\n    month[4] = &quot;May&quot;;\\n    month[5] = &quot;June&quot;;\\n    month[6] = &quot;July&quot;;\\n    month[7] = &quot;August&quot;;\\n    month[8] = &quot;September&quot;;\\n    month[9] = &quot;October&quot;;\\n    month[10] = &quot;November&quot;;\\n    month[11] = &quot;December&quot;;\\n    var n = month[d.getMonth()];\\n    DocumentInfo.SetFieldValue(&quot;monthonlyname&quot;,n);\\n}\\ncatch(e)\\n{\\n}</pre>\\n<br>Copy it into a .txt file and add it as .NET <a href=\\\"https://onlinehelp.coveo.com/en/ces/7.0/administrator/adding_a_postconversion_script.htm\\\" target=\\\"_blank\\\">postconversion script into the source</a>.<br><br>Note: At this stage, a rebuild of the source will be necessary.\\u00a0<br><br>Finally, you can create 2 facets:<br><br>- A facet with Field to Group On is PostedDateYear<br>- A facet with Field to Group On is PostedDateMonth and Field to Display is PostedDateMonthName<br><br><img alt=\\\"User-added image\\\" height=\\\"495\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5T\\\" width=\\\"500\\\"></img><br><br>\\u00a0</div>     </div>   </body> </html>\"], \"sfpublishstatus\": [\"Online\"], \"sfcreatedbyid\": [\"00560000002MKBSAA4\"], \"kav_description__c__html_stripped\": [\"In this article, we're going to show you how to create three fields from one Date/Time type custom field using Coveo .NET.\"], \"kav_islatestversion\": [true], \"kav_knowledgearticleid\": [\"kA132000000L8aFCAS\"], \"sfknowledgearticleid\": [\"kA132000000L8aFCAS\"], \"sfownername\": [\"Karel Mpungi\"], \"kav_datacategoryselections.attribute.type\": [\"KB_Article__DataCategorySelection;KB_Article__DataCategorySelection;KB_Article__DataCategorySelection\"], \"detectedtitle\": [\"Description\"], \"kav_createddate\": [1486399446], \"kav_build__c\": [\"All\"], \"language\": [\"English\"], \"coveo_foldingchild\": [\"6cdab9700870cc5026af23b2c9b0e136e0acca11cff0cdb1735d9049d384\"], \"sfownerid\": [\"00560000002MKBSAA4\"], \"kav_createdby.coveo_record_size\": [2], \"kav_systemmodstamp\": [1506940343], \"objecttype\": [\"KB Article\"], \"connectortype\": [\"Salesforce2\"], \"kav_coveo_record_size\": [4], \"originaluri\": [\"http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US\"], \"sfisvisibleincsp\": [true], \"convertertype\": [\"TYPE_HTML\"], \"filetype\": [\"SalesforceItem\"], \"kav_owner.name\": [\"Karel Mpungi\"], \"sfcoveoversionc\": [\"Coveo Enterprise Search 7.0\"], \"sfdcexpandedarticletype\": [\"All;All|How To/Question\"], \"objecttypelabelplural\": [\"KB Articles\"], \"sfcurrencyisocode\": [\"USD\"], \"sfisdeleted\": [false], \"extractedsize\": [6064], \"size\": [9713], \"kav_publishstatus\": [\"Online\"], \"kav_connector__c\": [\"N/A\"], \"generateexcerpt\": [true], \"sfdescriptionc\": [\"In this article, we&#39;re going to show you how to create three fields from one Date/Time type custom field using Coveo .NET.\"], \"sfarticletype\": [\"KB_Article__kav\"], \"kav_articletype\": [\"KB_Article__kav\"], \"kav_lastmodifieddate\": [1487019581], \"documenttype\": [\"article\"], \"sfkbarticlekavid\": [\"ka132000000LM2RAAW\"], \"kav_currencyisocode\": [\"USD\"], \"foldingparent\": [\"6cdab9700870cc5026af23b2c9b0e136e0acca11cff0cdb1735d9049d384\"], \"mappingtype\": [\"KB_Article\"], \"kav_isvisibleinpkb\": [true], \"kav_sourceid\": [\"50032000015yeqEAAQ\"], \"sfkbversionnumber\": [1], \"kav_isvisibleinapp\": [true], \"kav_resolution__c\": [\"The solution is to undo the backup process. In the meantime, here is a workaround:<br><br>From a Date/Time Type, we&#39;re going to create the following fields:<br><br>1) A year field<br>2) A month field\\u00a0<br>3) A month name field<br><br>You need to create 4 customs fields in CES:<br><br>1) Create a custom field based on the metadata returned by the \\u00a0@allfieldvalues values<br><br><img alt=\\\"User-added image\\\" height=\\\"233\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5O\\\" width=\\\"500\\\"></img><br><br>In this example, the metadata was &quot;Created&quot;, so let&#39;s create a Date/Time Type custom field with that metadata.<br><br><span style=\\\"color: #FF0000;\\\">Note: For section # 2 to 4, you can change the field name but keep the metadata name as it is since they are used in the postconversion script.</span><br><br>2) Create a &quot;PostedDateYear&quot; string type custom field:\\u00a0<br><br>Metadata Name: yearonly\\u00a0<br><br>3) Create a &quot;PostedDateMonth&quot; string type custom field:<br><br>Metadata Name: monthonlynumber\\u00a0<br><br>4) Create a &quot;PostedDateMonthName&quot; string type custom field:\\u00a0<br><br>Metadata Name: monthonlyname\\u00a0<br><br>Now that the custom fields are all created, you need to use a postconversiont script.<br><br>During the indexing process the script will:\\u00a0<br><br>- take the Year value from the &quot;PostedDate&quot; metadata and send it to the PostedDateYear field\\u00a0<br>- take the Month number value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonth field\\u00a0<br>- take the Month name value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonthName field\\u00a0<br><br>Here is the script:\\u00a0<br>\\u00a0\\n<pre class=\\\"ckeditor_codeblock\\\">\\ntry { \\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    PostConversion.Trace(d, 1);\\n\\n    var y = d.getFullYear();\\n    DocumentInfo.SetFieldValue(&quot;yearonly&quot;, y);\\n\\n    var m = d.getMonth() + 1;\\n    PostConversion.Trace(&quot;year&quot; + y + &quot; - month&quot; + m, 1);\\n    \\n    var monthNumberString;\\n    if (m.toString().length === 1)\\n    {\\n        monthNumberString = &quot;0&quot; + m.toString();\\n    }\\n    else\\n    {\\n        monthNumberString = m.toString();\\n    }\\n    PostConversion.Trace(&quot;monthNumberString: &quot; + monthNumberString, 1);\\n    DocumentInfo.SetFieldValue(&quot;monthonlynumber&quot;, monthNumberString);\\n\\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    var month = new Array();\\n    month[0] = &quot;January&quot;;\\n    month[1] = &quot;February&quot;;\\n    month[2] = &quot;March&quot;;\\n    month[3] = &quot;April&quot;;\\n    month[4] = &quot;May&quot;;\\n    month[5] = &quot;June&quot;;\\n    month[6] = &quot;July&quot;;\\n    month[7] = &quot;August&quot;;\\n    month[8] = &quot;September&quot;;\\n    month[9] = &quot;October&quot;;\\n    month[10] = &quot;November&quot;;\\n    month[11] = &quot;December&quot;;\\n    var n = month[d.getMonth()];\\n    DocumentInfo.SetFieldValue(&quot;monthonlyname&quot;,n);\\n}\\ncatch(e)\\n{\\n}</pre>\\n<br>Copy it into a .txt file and add it as .NET <a href=\\\"https://onlinehelp.coveo.com/en/ces/7.0/administrator/adding_a_postconversion_script.htm\\\" target=\\\"_blank\\\">postconversion script into the source</a>.<br><br>Note: At this stage, a rebuild of the source will be necessary.\\u00a0<br><br>Finally, you can create 2 facets:<br><br>- A facet with Field to Group On is PostedDateYear<br>- A facet with Field to Group On is PostedDateMonth and Field to Display is PostedDateMonthName<br><br><img alt=\\\"User-added image\\\" height=\\\"495\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5T\\\" width=\\\"500\\\"></img><br><br>\\u00a0\"], \"coveo_objecttype\": [\"KB_Article\"], \"printableuri\": [\"http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US\"], \"kav_datacategoryselections.attribute.url\": [\"/services/data/v34.0/sobjects/KB_Article__DataCategorySelection/02o32000000q0teAAA;/services/data/v34.0/sobjects/KB_Article__DataCategorySelection/02o32000000q0tfAAA;/services/data/v34.0/sobjects/KB_Article__DataCategorySelection/02o32000000q1aEAAQ\"], \"kav_id\": [\"ka132000000LM2RAAW\"], \"sfresolutionc\": [\"The solution is to undo the backup process. In the meantime, here is a workaround:<br><br>From a Date/Time Type, we&#39;re going to create the following fields:<br><br>1) A year field<br>2) A month field\\u00a0<br>3) A month name field<br><br>You need to create 4 customs fields in CES:<br><br>1) Create a custom field based on the metadata returned by the \\u00a0@allfieldvalues values<br><br><img alt=\\\"User-added image\\\" height=\\\"233\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5O\\\" width=\\\"500\\\"></img><br><br>In this example, the metadata was &quot;Created&quot;, so let&#39;s create a Date/Time Type custom field with that metadata.<br><br><span style=\\\"color: #FF0000;\\\">Note: For section # 2 to 4, you can change the field name but keep the metadata name as it is since they are used in the postconversion script.</span><br><br>2) Create a &quot;PostedDateYear&quot; string type custom field:\\u00a0<br><br>Metadata Name: yearonly\\u00a0<br><br>3) Create a &quot;PostedDateMonth&quot; string type custom field:<br><br>Metadata Name: monthonlynumber\\u00a0<br><br>4) Create a &quot;PostedDateMonthName&quot; string type custom field:\\u00a0<br><br>Metadata Name: monthonlyname\\u00a0<br><br>Now that the custom fields are all created, you need to use a postconversiont script.<br><br>During the indexing process the script will:\\u00a0<br><br>- take the Year value from the &quot;PostedDate&quot; metadata and send it to the PostedDateYear field\\u00a0<br>- take the Month number value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonth field\\u00a0<br>- take the Month name value from the &quot;PostedDate&quot; metadata and send it to the PostedDateMonthName field\\u00a0<br><br>Here is the script:\\u00a0<br>\\u00a0\\n<pre class=\\\"ckeditor_codeblock\\\">\\ntry { \\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    PostConversion.Trace(d, 1);\\n\\n    var y = d.getFullYear();\\n    DocumentInfo.SetFieldValue(&quot;yearonly&quot;, y);\\n\\n    var m = d.getMonth() + 1;\\n    PostConversion.Trace(&quot;year&quot; + y + &quot; - month&quot; + m, 1);\\n    \\n    var monthNumberString;\\n    if (m.toString().length === 1)\\n    {\\n        monthNumberString = &quot;0&quot; + m.toString();\\n    }\\n    else\\n    {\\n        monthNumberString = m.toString();\\n    }\\n    PostConversion.Trace(&quot;monthNumberString: &quot; + monthNumberString, 1);\\n    DocumentInfo.SetFieldValue(&quot;monthonlynumber&quot;, monthNumberString);\\n\\n    var d = new Date(DocumentInfo.GetFieldValue(&quot;Created&quot;));\\n    var month = new Array();\\n    month[0] = &quot;January&quot;;\\n    month[1] = &quot;February&quot;;\\n    month[2] = &quot;March&quot;;\\n    month[3] = &quot;April&quot;;\\n    month[4] = &quot;May&quot;;\\n    month[5] = &quot;June&quot;;\\n    month[6] = &quot;July&quot;;\\n    month[7] = &quot;August&quot;;\\n    month[8] = &quot;September&quot;;\\n    month[9] = &quot;October&quot;;\\n    month[10] = &quot;November&quot;;\\n    month[11] = &quot;December&quot;;\\n    var n = month[d.getMonth()];\\n    DocumentInfo.SetFieldValue(&quot;monthonlyname&quot;,n);\\n}\\ncatch(e)\\n{\\n}</pre>\\n<br>Copy it into a .txt file and add it as .NET <a href=\\\"https://onlinehelp.coveo.com/en/ces/7.0/administrator/adding_a_postconversion_script.htm\\\" target=\\\"_blank\\\">postconversion script into the source</a>.<br><br>Note: At this stage, a rebuild of the source will be necessary.\\u00a0<br><br>Finally, you can create 2 facets:<br><br>- A facet with Field to Group On is PostedDateYear<br>- A facet with Field to Group On is PostedDateMonth and Field to Display is PostedDateMonthName<br><br><img alt=\\\"User-added image\\\" height=\\\"495\\\" src=\\\"https://c.na61.content.force.com/servlet/rtaImage?eid=ka132000000LM2R&amp;feoid=00N32000002zy1J&amp;refid=0EM32000000VL5T\\\" width=\\\"500\\\"></img><br><br>\\u00a0\"], \"foldingchild\": [\"6cdab9700870cc5026af23b2c9b0e136e0acca11cff0cdb1735d9049d384\"], \"sfcreateddate\": [1486399446], \"kav_sitecore_version__c\": [\"N/A\"], \"kav_owner.coveo_record_size\": [2], \"kav_coveo_effective_modstamp\": [1506940343], \"kav_summary__html_stripped\": [\"\"], \"kav_dc_article_type\": [\"How To/Question\"], \"sfconnectorc\": [\"N/A\"], \"kav_dc_product\": [\".NET Search Interface;Coveo Enterprise Search\"], \"ka_coveo_record_size\": [2], \"kav_dc_expanded_article_type\": [\"All;All|How To/Question\"], \"kav_datacategoryselections.coveo_record_size\": [\"2;2;2\"], \"concepts\": [\"custom fields ; backup process ; Lotus Notes ; metadata ; PostedDateYear ; script ; using Coveo ; allfieldvalues ; monthonlyname\"], \"sfkbid\": [\"kA132000000L8aFCAS\"], \"kav_firstpublisheddate\": [1487019581], \"coveo_organization_id\": [\"00D3000000007r2\"], \"coveo_foldingcollection\": [\"94aa2e5b13f409e5a374dc5f5613366e0f5dd4ec5e2f6adfc2992d6f6e87\"], \"sffirstpublisheddate\": [1487019581], \"sflastmodifieddate\": [1487019581], \"kav_coveo_version__c\": [\"Coveo Enterprise Search 7.0\"], \"kav_vendor_version__c__html_stripped\": [\"\"], \"detectedlanguage\": [1], \"kav_isvisibleinprm\": [true], \"kav_owner.attribute.type\": [\"Name\"], \"kav_lastmodifiedby.attribute.url\": [\"/services/data/v34.0/sobjects/User/00560000002MKBSAA4\"], \"sitename\": [\"Community\"], \"kav_createdby.name\": [\"Karel Mpungi\"], \"sfarticlenumber\": [\"000002051\"], \"kav_lastmodifiedby.coveo_record_size\": [2], \"sfisvisibleinpkb\": [true], \"kav_datacategoryselections.id\": [\"02o32000000q0teAAA;02o32000000q0tfAAA;02o32000000q1aEAAQ\"], \"kav_description__c\": [\"In this article, we&#39;re going to show you how to create three fields from one Date/Time type custom field using Coveo .NET.\"], \"kav_attribute.url\": [\"/services/data/v34.0/sobjects/KB_Article__kav/ka132000000LM2RAAW\"], \"kav_articlenumber__stripped\": [\"2051\"], \"sfversionnumber\": [1], \"kav_attribute.type\": [\"KB_Article__kav\"], \"kav_validationstatus\": [\"Reviewed\"], \"coveo_foldingparent\": [\"6cdab9700870cc5026af23b2c9b0e136e0acca11cff0cdb1735d9049d384\"], \"collection\": [\"default\"], \"sfsourceid\": [\"50032000015yeqEAAQ\"], \"date\": [1506940343], \"kav_lastmodifiedby.id\": [\"00560000002MKBSAA4\"], \"kav_datacategoryselections.datacategorygroupname\": [\"Product;Article_Type;Product\"], \"conversionstate\": [0], \"sfvalidationstatus\": [\"Reviewed\"], \"kav_isdeleted\": [false], \"sflastmodifiedbyid\": [\"00560000002MKBSAA4\"], \"kav_lastmodifiedby.name\": [\"Karel Mpungi\"], \"kav_articlenumber\": [\"000002051\"], \"permanentid\": [\"c039cdc07ddde6923f45ea7adb06abdd108932df99f094aae416b0d6230f\"]}",
      "sfbuildc" : "All",
      "sflastmodifiedbyid" : "00560000002MKBSAA4",
      "syssfownerid" : "00560000002MKBSAA4",
      "sfsitecoreversionc" : "N/A",
      "sourcetype" : "Salesforce",
      "sysconnectortype" : "Salesforce2",
      "sftitle" : "How to create three fields from one Date/Time type custom field",
      "rowid" : 5492551,
      "syssfcreatedbyid" : "00560000002MKBSAA4",
      "sfdescriptionc" : "In this article, we&#39;re going to show you how to create three fields from one Date/Time type custom field using Coveo .NET.",
      "size" : 9713,
      "sfislatestversion" : "true",
      "sysdocumenttype" : "article",
      "sfcreateddate" : 1486399446000,
      "sfsourceid" : "50032000015yeqEAAQ",
      "clickableuri" : "https://na61.salesforce.com/kA132000000L8aF",
      "syssource" : "Salesforce Public Items",
      "sfownerid" : "00560000002MKBSAA4",
      "orderingid" : 212384990660371359,
      "sfpublishstatus" : "Online",
      "syssize" : 9713,
      "sysdate" : 1506940343000,
      "sflanguage" : "en_US",
      "sysparents" : "<?xml version=\"1.0\" encoding=\"utf-16\"?><parents><parent name=\"Organization\" uri=\"https://na61.salesforce.com/home/home.jsp\" /><parent name=\"KB_Article__ka\" uri=\"http://www.salesforce.com/org:organization/articletype:KB_Article\" /><parent name=\"How to create three fields from one Date_Time type custom field\" uri=\"https://na61.salesforce.com/kA132000000L8aF\" /></parents>",
      "sfdcexpandedarticletype" : "All;All|How To/Question",
      "sfcurrencyisocode" : "USD",
      "sfkbid" : "kA132000000L8aFCAS",
      "sfcausec" : "Following a backup process on the Lotus Notes server, last modified date sent by Lotus Notes to CES became the date of the backup, not the actual last modified date.<br> ",
      "sfdcexpandedproduct" : "All;All|.NET Search Interface;All|Coveo Enterprise Search",
      "syssfcreateddate" : 1486399446000,
      "sflastmodifieddate" : 1487019581000,
      "sfisvisibleinpkb" : "true",
      "source" : "Salesforce Public Items",
      "sfisdeleted" : "false",
      "sfisvisibleincsp" : "true",
      "sfvalidationstatus" : "Reviewed",
      "sflastmodifiedbyname" : "Karel Mpungi",
      "collection" : "default",
      "sfdcproduct" : [ ".NET Search Interface", "Coveo Enterprise Search" ],
      "syssourcetype" : "Salesforce",
      "sfarticletype" : "KB_Article__kav",
      "indexeddate" : 1518187549000,
      "connectortype" : "Salesforce2",
      "filetype" : "SalesforceItem",
      "sfcreatedbyname" : "Karel Mpungi",
      "sysclickableuri" : "https://na61.salesforce.com/kA132000000L8aF",
      "sysfiletype" : "SalesforceItem",
      "language" : [ "English" ],
      "sffirstpublisheddate" : 1487019581000,
      "sfownername" : "Karel Mpungi",
      "sitename" : "Community",
      "sysrowid" : 5492551,
      "uri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
      "syscollection" : "default"
    },
    "Title" : "How to create three fields from one Date_Time type custom field",
    "Uri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "PrintableUri" : "http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "ClickUri" : "https://na61.salesforce.com/kA132000000L8aF",
    "UniqueId" : "42.13819$http://www.salesforce.com/org:organization/articletype:KB_Article/article:kA132000000L8aFCAS/language:en_US",
    "Excerpt" : "In this article, we're going to show you how to create three fields from one Date/Time type custom field using Coveo .NET. ... Following a backup process on the Lotus Notes server, last modified da...",
    "FirstSentences" : null
  }